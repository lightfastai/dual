name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.2'
          cache: true

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage-unit.out -covermode=atomic ./internal/...

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage-unit.out
          flags: unit
          fail_ci_if_error: false
        if: always()

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.2'
          cache: true

      - name: Configure git for tests
        run: |
          git config --global user.email "test@example.com"
          git config --global user.name "Test User"
          git config --global init.defaultBranch main

      - name: Run integration tests
        run: go test -v -timeout=10m -coverprofile=coverage-integration.out -covermode=atomic ./test/integration/...

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage-integration.out
          flags: integration
          fail_ci_if_error: false
        if: always()

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.2'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.2'
          cache: true

      - name: Build binary
        run: go build -v -o dual ./cmd/dual

      - name: Verify binary
        run: ./dual --version

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, lint, build]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Build: ${{ needs.build.result }}"

          if [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi
