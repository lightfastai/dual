#!/usr/bin/env bash
#
# setup-environment.sh - Environment file generation hook for dual
#
# This hook creates .env.local files with service-specific ports and other
# environment variables for the worktree.
#
# Environment variables provided by dual:
#   DUAL_EVENT         - The hook event (postWorktreeCreate)
#   DUAL_CONTEXT_NAME  - The name of the context (branch name)
#   DUAL_CONTEXT_PATH  - The absolute path to the worktree
#   DUAL_PROJECT_ROOT  - The absolute path to the main project

set -e  # Exit on error

echo "[setup-environment] Setting up environment for context: ${DUAL_CONTEXT_NAME}"

# Configuration (must match assign-ports.sh)
PORT_RANGE=100  # Number of ports allocated per context

# Read port assignments from .dual-port file
PORT_FILE="${DUAL_CONTEXT_PATH}/.dual-port"

if [ ! -f "${PORT_FILE}" ]; then
  echo "[setup-environment] ERROR: Port file not found: ${PORT_FILE}"
  echo "[setup-environment] Make sure assign-ports.sh hook ran successfully"
  exit 1
fi

# Source the port file to get PORT variables
# shellcheck source=/dev/null
source "${PORT_FILE}"

echo "[setup-environment] Loaded port assignments:"
echo "[setup-environment]   BASE_PORT=${BASE_PORT}"
echo "[setup-environment]   WEB_PORT=${WEB_PORT}"
echo "[setup-environment]   API_PORT=${API_PORT}"
echo "[setup-environment]   WORKER_PORT=${WORKER_PORT}"

# Create .env.local file at the root of the worktree
ENV_FILE="${DUAL_CONTEXT_PATH}/.env.local"

cat > "${ENV_FILE}" << EOF
# Environment file for dual context: ${DUAL_CONTEXT_NAME}
# Generated by setup-environment.sh on $(date)
# DO NOT COMMIT THIS FILE - It is specific to this worktree

# Port assignments
PORT_WEB=${WEB_PORT}
PORT_API=${API_PORT}
PORT_WORKER=${WORKER_PORT}

# Context information
DUAL_CONTEXT=${DUAL_CONTEXT_NAME}
DUAL_BASE_PORT=${BASE_PORT}

# Service URLs (for inter-service communication)
WEB_URL=http://localhost:${WEB_PORT}
API_URL=http://localhost:${API_PORT}

# Database configuration (context-specific)
# Use context name in database name to prevent conflicts
DATABASE_URL=postgresql://localhost:5432/myapp_${DUAL_CONTEXT_NAME}
DATABASE_NAME=myapp_${DUAL_CONTEXT_NAME}

# Redis configuration (context-specific)
# Use different Redis database number for each context (hash % 16)
REDIS_URL=redis://localhost:6379
REDIS_DB=$(( (BASE_PORT / PORT_RANGE) % 16 ))

# Common environment variables
NODE_ENV=development
LOG_LEVEL=info

# API Keys (load from .env.example if it exists)
# Add your actual secrets to .env.example and keep it out of git
EOF

echo "[setup-environment] Created environment file: ${ENV_FILE}"

# Also create service-specific .env files if the services have envFile configured
# These inherit from the root .env.local

# Web service
if [ -d "${DUAL_CONTEXT_PATH}/apps/web" ]; then
  WEB_ENV="${DUAL_CONTEXT_PATH}/apps/web/.env"
  cat > "${WEB_ENV}" << EOF
# Web service environment
# Generated on $(date)

# Port for this service
PORT=${WEB_PORT}

# Load shared environment
# In your application, use dotenv to load both this file and ../.env.local
EOF
  echo "[setup-environment] Created web service env: ${WEB_ENV}"
fi

# API service
if [ -d "${DUAL_CONTEXT_PATH}/apps/api" ]; then
  API_ENV="${DUAL_CONTEXT_PATH}/apps/api/.env"
  cat > "${API_ENV}" << EOF
# API service environment
# Generated on $(date)

# Port for this service
PORT=${API_PORT}

# Load shared environment
# In your application, use dotenv to load both this file and ../.env.local
EOF
  echo "[setup-environment] Created API service env: ${API_ENV}"
fi

# Worker service
if [ -d "${DUAL_CONTEXT_PATH}/apps/worker" ]; then
  WORKER_ENV="${DUAL_CONTEXT_PATH}/apps/worker/.env"
  cat > "${WORKER_ENV}" << EOF
# Worker service environment
# Generated on $(date)

# Port for this service (workers typically don't need ports, but included for completeness)
PORT=${WORKER_PORT}

# Load shared environment
# In your application, use dotenv to load both this file and ../.env.local
EOF
  echo "[setup-environment] Created worker service env: ${WORKER_ENV}"
fi

# Create a .gitignore for environment files if it doesn't exist
GITIGNORE="${DUAL_CONTEXT_PATH}/.gitignore"
if [ ! -f "${GITIGNORE}" ]; then
  cat > "${GITIGNORE}" << EOF
# Environment files (worktree-specific)
.env.local
.dual-port
apps/*/.env
EOF
  echo "[setup-environment] Created .gitignore: ${GITIGNORE}"
fi

echo "[setup-environment] Environment setup complete!"
echo ""
echo "You can now run services in this worktree:"
echo "  cd ${DUAL_CONTEXT_PATH}/apps/web && npm install && npm start"
echo ""
echo "The services will use these ports:"
echo "  Web:    http://localhost:${WEB_PORT}"
echo "  API:    http://localhost:${API_PORT}"
echo "  Worker: (background process on port ${WORKER_PORT})"

# Exit successfully
exit 0
